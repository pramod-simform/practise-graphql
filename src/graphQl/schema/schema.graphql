interface Node {
  id: ID!
}

type User implements Node {
  id: ID!
  name: String!
  email: String!
  age: Int!
  location: String!
  posts: [Post!]!
}

type Post implements Node {
  id: ID!
  userId: ID!
  title: String!
  content: String!
  user: User!
  comments: [Comment!]!
  likes: [Like!]!
}

type Comment implements Node {
  id: ID!
  userId: ID!
  postId: ID!
  content: String!
  user: User!
  post: Post!
}

type Like implements Node {
  id: ID!
  userId: ID!
  postId: ID!
  user: User!
  post: Post!
}

type Query {
  getNodeById(id: ID!): Node
  getUserById(id: ID!): User
  getPostById(id: ID!): Post
  getCommentById(id: ID!): Comment
  getLikeById(id: ID!): Like
}

type Mutation {
  createUser(name: String!, email: String!, age: Int!, location: String!): User
  createPost(userId: ID!, title: String!, content: String!): Post
  createComment(userId: ID!, postId: ID!, content: String!): Comment
  createLike(userId: ID!, postId: ID!): Like
}